------------------------------------------------------------
项目致力于让 PowerShell 拥有更好的 UI 开发体验，使得 PowerShell 可以实现开发 WinUI 3 应用以及利用 WinUI 3 控件。

仅使用 PS 快速创建完整的 WinUI 3 应用 —— PSWinUI.AOT 模块

1. 简介  
   PSWinUI.AOT 模块是面向 Visual Studio 环境下 WinUI 3 应用开发的 PowerShell 模块。模块旨在通过 cmdlet 命令描述界面，自动生成 XAML 与 C# 代码，并更新项目文件，确保所有生成的代码能够正常编译。  
   模块主要提供以下功能：  
   - 自动清除 Visual Studio 默认模板中不需要的 XAML 与 C# 文件  
   - 自动创建并管理用于存放生成代码的 Generated 文件夹  
   - 提供一系列 PowerShell cmdlet 命令（例如 New-WinUIWindow、Add-UIButton、Add-UILabel、Add-UITextBox、Add-UIListView）用于描述 UI 元素  
   - 自动生成带有错误映射的 C# 代码后置文件（利用 #line 指令将错误行号映射到 PowerShell 脚本中）  
   - 自动更新项目文件 (*.csproj)，确保 Generated 文件夹中的代码文件被正确编译  
     - 集成一条 cmdlet 命令 Invoke-DSLGeneration，实现一键执行所有生成流程，简化用户操作

2. PSWinUI.AOT 模块安装  
   2.1 模块文件结构  

         # 核心模块文件

   2.2 如何加载模块  

   在你的 PowerShell 脚本或终端中加载该模块。例如，在脚本文件（ui.ps1）开头添加以下内容：

       Import-Module "$PSScriptRoot\PSWinUI.AOT.psm1"

   请确保模块文件与脚本处于同一目录，或者根据实际情况调整 Import-Module 命令中的模块路径。

------------------------------------------------------------

3. 项目配置  

   为了获得最佳使用体验，建议在 Visual Studio 中使用 WinUI 3 项目模板，将下列文件部署到项目目录中：
       PSWinUI.AOT.psm1
       PSWinUI.AOT.psd1
   然后创建脚本文件 ui.ps1（位于项目根目录），用于描述 WinUI 3 界面。

   项目模板文件结构示例：

       MyWinUI3AppTemplate
       ├── Generated               <-- 用于存放生成代码的文件夹（实际由模块自动创建/管理）
       ├── ui.ps1                  <-- 用户编写 PowerShell 脚本
       ├── PSWinUI.AOT.psm1        <-- 模块核心文件
       ├── PSWinUI.AOT.psd1        <-- 模块配置文件
       ├── MyWinUI3AppTemplate.csproj  <-- 项目文件（生成代码的引用将自动添加至此文件中）
       └── 其他默认文件（例如 App.xaml 等，这些会在生成流程中被移除）

   注意：默认模板生成的一些 XAML 与 C# 文件（例如 App.xaml、MainWindow.xaml 等）将在执行生成流程时被自动清除，保证所有有效代码都集中在 Generated 文件夹中。

------------------------------------------------------------

4. PSWinUI.AOT 脚本编写  

   在项目根目录下创建或修改 ui.ps1 文件，使用模块中提供的 PowerShell cmdlet 命令描述你的 WinUI 3 界面。  
   下面是一个示例脚本：

       # ui.ps1 示例
       # 导入模块
       Import-Module "$PSScriptRoot\PSWinUI.AOT.psm1"

       # 调用 cmdlet 命令生成主窗口模板
       New-WinUIWindow -Title "我的 WinUI 应用" -Width 800 -Height 600

       # 向主窗口中添加一个按钮
       Add-UIButton -ButtonText "点击我"

       # 添加一个标签
       Add-UILabel -LabelText "欢迎使用 PSWinUI 模块"

       # 添加一个文本框
       Add-UITextBox -Placeholder "请输入文本..."

       # 添加一个 ListView 控件
       Add-UIListView -Name "lvSample"

       # 最后，调用一键生成的 cmdlet 命令执行整个生成流程
       Invoke-DSLGeneration

   上述 cmdlet 命令将生成的代码写入 Generated 文件夹中，同时生成的 C# 文件中嵌入了 #line 指令，将错误行号映射回 PowerShell 脚本 ui.ps1，便于问题定位。

------------------------------------------------------------

5. 命令详细说明  

5.1 清理与生成目录管理  

   - Clear-DefaultFiles  
     清除 Visual Studio 默认提供的 XAML 与 C# 文件（例如 App.xaml、MainWindow.xaml 等），保证生成目录中只包含有效代码。  
     用法：  
         Clear-DefaultFiles -ProjectRoot "C:\MyProject"

   - Ensure-GeneratedFolder  
     确保项目中存在 Generated 文件夹，如不存在则自动创建，并返回该文件夹路径。  
     用法：  
         Ensure-GeneratedFolder -ProjectRoot "C:\MyProject" -GeneratedFolderName "Generated"

5.2 UI 生成 cmdlet 命令  

   - New-WinUIWindow  
     根据传入参数生成主窗口的 XAML 文件（默认生成在 Generated\MainWindow.xaml）。  
     参数：  
       - -Title：窗口标题  
       - -Width：窗口宽度（默认 800）  
       - -Height：窗口高度（默认 600）  
     用法：  
         New-WinUIWindow -Title "我的应用" -Width 1024 -Height 768

   - Add-UIButton  
     向现有的窗口 XAML 中添加一个按钮控件。  
     参数：  
       - -ButtonText：按钮上显示的文本  
       - -OnClickScript（可选）：点击事件对应的代码（示例中未进行深入处理）  
     用法：  
         Add-UIButton -ButtonText "点击我"

   - Add-UILabel  
     向窗口中添加一个文本标签控件。  
     参数：  
       - -LabelText：显示的文本内容  
     用法：  
         Add-UILabel -LabelText "欢迎使用 PSWinUI 模块"

   - Add-UITextBox  
     向窗口中添加一个文本框控件，支持设置提示文本。  
     参数：  
       - -Placeholder：提示文本  
     用法：  
         Add-UITextBox -Placeholder "请输入..."

   - Add-UIListView  
     向窗口中添加一个 ListView 控件，用于展示列表项。  
     参数：  
       - -Name：控件名称，用于后续引用或事件绑定  
     用法：  
         Add-UIListView -Name "lvExample"

5.3 代码后置文件生成与项目更新  

   - Generate-CodeBehind  
     为生成的 XAML 界面生成对应的 C# 后置文件（.xaml.cs），同时在文件中插入 #line 指令，将行号映射回 PowerShell 脚本 ui.ps1，方便调试。  
     用法：  
         Generate-CodeBehind -OutputPath ".\Generated\MainWindow.xaml.cs"

   - Update-ProjectFile  
     更新当前项目的 *.csproj 文件，在其中加入 Generated 文件夹中 XAML 与 C# 文件的引用，确保这些文件在编译时被包含。  
     用法：  
         Update-ProjectFile -ProjectRoot (Get-Location).Path -GeneratedFolder "Generated"

5.4 一键生成入口  

   - Invoke-DSLGeneration  
     整合前述所有操作，一键执行生成流程。此命令将依次调用：  
       1. 清除默认文件  
       2. 确保生成目录存在  
       3. 执行 PowerShell 脚本（默认读取项目根目录下的 ui.ps1）  
       4. 生成代码后置文件（带 #line 指令的 C# 文件）  
       5. 更新项目文件，确保生成目录被包含  
     用法：  
       在命令行控制台调用，可直接使用默认参数：  
           Invoke-DSLGeneration  
       或者指定 PowerShell 脚本路径：  
           Invoke-DSLGeneration -DslScriptPath ".\ui.ps1"

------------------------------------------------------------

6. 使用示例流程  

   1. 使用 Visual Studio 创建新项目  
      使用预定义的 WinUI 3 项目模板创建新项目，模板中包含 PSWinUI.AOT.psm1 模块和示例脚本 ui.ps1。

   2. 编辑脚本  
      打开项目根目录下的 ui.ps1，根据需要修改或添加 cmdlet 命令以定义界面布局和控件。

   3. 运行生成流程  
      可以通过以下两种方式触发生成：  
      - 预构建事件：在项目文件 (*.csproj) 中设置 MSBuild 预构建事件，调用如下命令：
            
            powershell -NoProfile -ExecutionPolicy Bypass -Command "Invoke-DSLGeneration"  

      - 手动调用：在脚本 ui.ps1 末尾调用 Invoke-DSLGeneration，保存后直接运行 PowerShell 脚本进行生成。

   4. 编译与调试  
      生成的 XAML 与 C# 文件位于 Generated 文件夹中，由 Update-ProjectFile 命令自动添加至项目编译项。你可以像调试普通 WinUI 3 应用那样重新编译并调试项目。  
      调试时，如果出现错误，Generate-CodeBehind 生成的 C# 文件中的 #line 指令将错误行号映射回 PowerShell 脚本 ui.ps1，便于定位问题。

------------------------------------------------------------

7. 注意事项  

   - 脚本执行策略：确保你的 PowerShell 执行策略允许运行脚本（例如，可使用 -ExecutionPolicy Bypass 参数）。
   - 项目文件格式：Update-ProjectFile 命令对 csproj 文件采用了较简单的 XML 操作方法，如遇特殊情况，请根据实际项目进行调整。
   - 扩展与定制：模块中提供的 cmdlet 命令覆盖了常见控件，用户可以根据需要对模块进行扩展，或直接进入生成代码进行细粒度调试或调整。

------------------------------------------------------------

在命令行环境创建 WinUI 3 窗口 —— PSWinUI.Core

   模块仍处于开发早期阶段，尚不可实际使用。

   使用说明：  
   1. 准备环境  
      - 使用 Visual Studio 编译 C# 项目，生成 PSWinUI.Core.dll。  
      - 将生成的 DLL 与 PSWinUI.psm1、PSWinUI.psd1 放在同一目录下。

   2. 加载模块并运行  
      在 PowerShell（必须以 STA 模式运行，可使用 PowerShell.exe -STA）中执行如下命令：  

          Import-Module <模块所在路径>\PSWinUI.psd1  
          New-PSWinUIWindow -Title "My WinUI 3 App" -Message "Welcome to PSWinUI!"

      这将调用底层 C# 方法，在 WinUI 3 环境下启动一个窗口，并显示居中的文字。

------------------------------------------------------------

在 WinUI 3 应用项目中使用 PowerShell+XAML 开发应用：尚未开始
------------------------------------------------------------
